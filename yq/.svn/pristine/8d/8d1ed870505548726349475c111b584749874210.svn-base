<template>
    <div class="table">
        <div class="crumbs">
            <el-breadcrumb separator="/">
                <el-breadcrumb-item><i class="el-icon-tickets"></i> 考核指标管理/考核模板管理</el-breadcrumb-item>
            </el-breadcrumb>
        </div>
        <div class="container">
            <div class="handle-box">
                <el-input v-model="mapkeyword" placeholder="请输入您需要查找的关键字" class="handle-input mr10"></el-input>
                <el-button type="primary" icon="search" @click="handleSearch">搜索</el-button>
                <el-button type="primary" icon="delete" class="handle-del mr10" @click="showAddWssAlert">新增模板</el-button>
            </div>
            <el-table :data="data" border style="width: 100%" ref="multipleTable">
                <el-table-column prop="templateNumber" label="编号" ></el-table-column>
                <el-table-column prop="templateName" width="240" label="模板名称" ></el-table-column>
                <el-table-column prop="createTime" label="创建时间" ></el-table-column>
                 <el-table-column prop="description" width="240" label="考核项" ></el-table-column>
                <el-table-column label="操作" width="200" fixed="right">
                    <template slot-scope="scope">
                        <el-button type="danger" size="small" @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <div class="pagination">
                <el-pagination 
                    @current-change="handleCurrentChange" 
                    :current-page.sync="currentPage"
                    layout="total, prev, pager, next"
                    :page-size="pageSize"
                    :total="sumsize">
                </el-pagination>
            </div>
        </div>

        <!-- 删除提示框 -->
        <el-dialog title="提示" :visible.sync="delVisible" width="300px" center>
            <div class="del-dialog-cnt">删除不可恢复，是否确定删除？</div>
            <span slot="footer" class="dialog-footer">
                <el-button @click="delVisible = false">取 消</el-button>
                <el-button type="primary" @click="doDelete(scope.$index, scope.row)">确 定</el-button>
            </span>
        </el-dialog>

        <!-- 新增卫生室弹出框 -->
        <el-dialog :title="dialogTitle" :visible.sync="addVisible" width="640px">
            <el-form ref="ruleForm" :rules="rules" :model="ruleForm" label-width="110px">
                <el-row :gutter="20">
                    <el-col :span="20">
                        <el-form-item label="模板名称" prop="templateName">
                            <el-input v-model="ruleForm.templateName"></el-input>
                        </el-form-item>
                    </el-col>
                </el-row>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="addVisible = false">取 消</el-button>
                <el-button type="primary" @click="doSaveAdd('ruleForm')">确 定</el-button>
            </span>
        </el-dialog>
    </div>
</template>

<script>
import axios from '@/services/axios';
import api from '@/services/api';
import bus from "@/components/common/bus";

export default {
    name: "cwweb",
    data() {
        return {
            currentPage: 1,
            pageSize: 10,
            sumsize: 1,
            keyword: '',
            tableData: [],
            cur_page: 1,
            cwwebData: [],
            mapkeyword: '',
            addVisible: false,
            delVisible: false,
            mapVisible: false,
            areaList: [],
            areaProps: {
                value: "code",
                label: "name",
                children: "child"
            },
            mapStyle: {
                width: "550px",
                height: "300px"
            },
            center: { lng: 115.47146, lat: 38.879989 },
            zoom: 15,
            dialogTitle: '',
            ruleForm: {
                templateName: '',
                templateNumber: '',
                description: '',
            },
            rules: {  
                    templateName: [
                        { required: true, message: '请输入模板名称', trigger: 'blur' }
                    ]
                },
            idx: -1
        };
    },
    created() {
        this.getData();
        this.getcwwebData();
        
        bus.$on('tags' + this.$router.history.current.fullPath.split('/').join('-'), this.getData);
    },
    computed: {
        data() {
            return this.tableData;
        }
    },
    methods: {
        // 分页导航
        handleCurrentChange(val) {
            this.cur_page = val;
            this.getData();
        },
        //添加卫生室弹框
        showAddWssAlert() {
            this.dialogTitle = '新增考核模板';
            this.addVisible = true;
            Object.assign(this.$data.ruleForm, this.$options.data().ruleForm);
            this.getNumber();
        },
        //获得编号方法
	    getNumber(){
		    axios.post({ url: api.commn.getNumber, data:{numberRuleCode:'PlanNumber'} }).then(res => {
			    if (res.code == 0) {
                    this.ruleForm.templateNumber = res.data;
			    } else {
			        this.ruleForm.templateNumber ='1';
			    }
		    });
	    },
        handleDel(index, row){
            this.delVisible = true;
            this.idx = row.orgnumber;
        },
         //表单提交前处理数据方法
		 handleData(action,_data) {
			 if(null != _data)
			 {
				 _data.model = 'tb_kpi_template';
				 _data.action = action;
			 }
			 return _data;
		 },
        //删除
        handleDelete(index, row){

            this.idx = row.templateNumber;
            var parameter = { action:'deleteById',model:'tb_kpi_template',templateNumber:this.idx};
            console.log(parameter);
            axios.post({ url: api.cwweb.action, data: parameter}).then(res => {
				 if (res.code == 0) {
					 this.delVisible = false;
					//  this.tableData.splice(this.idx, 1);
                     this.$message.success("删除成功");
                     this.getData();
				 } else {
					 this.$message.error(res.message);
				 }
			 });
        },
        //查询表格数据
        getData() {
			 var parameter = { action:'select',model:'tb_kpi_template'};
			 axios.post({
				 url: api.cwweb.action,
				 data: parameter
			 }).then(res => {
				 if (res.code == 0) {
                    this.tableData = res.data;
                    this.sumsize = res.sumsize;
				 } else {
					 this.$message.error(res.message);
				 }
			 });
        },
        //查询
        handleSearch() {
            this.getData()
        },
        validate(formName) {
            return new Promise((resolve, reject) => {
                this.$refs[formName].validate((valid) => {
                    if(valid){
                        resolve()
                    }
                });
            })
        },
        //新增考核模板
        doSaveAdd(formName) {
            this.validate(formName).then(() => {
                var parameter = { 
                    action:'insert',
                    model:'tb_kpi_template',
                    templateNumber:this.ruleForm.templateNumber,
                    templateName:this.ruleForm.templateName,
                    description:this.ruleForm.templateName,
                };
                console.log(parameter)
			    axios.post({
				    url: api.cwweb.action,
				    data: parameter
			     }).then(res => {
				    if (res.code == 0) {
                        this.$message.success(this.dialogTitle + '成功');
                        this.getData();
                        Object.assign(this.$data.ruleForm, this.$options.data().ruleForm);
                        this.addVisible = false;
				    } else {
					    this.$message.error(res.message);
				    }
			 });
            })
        },
        getMap() {
            this.mapVisible = true;
        },
        doMap: function() {
            this.ruleForm.location = this.center.lng + "," + this.center.lat;
            this.mapVisible = false;
        },
        /***
         * 地图点击事件。
         */
        getClickInfo(e) {
            this.center.lng = e.point.lng;
            this.center.lat = e.point.lat;
        },
        syncCenterAndZoom(e) {
            const { lng, lat } = e.target.getCenter();
            this.center.lng = lng;
            this.center.lat = lat;
            this.zoom = e.target.getZoom();
        },
    }
};
</script>

<style scoped>
.handle-box {
  margin-bottom: 20px;
}

.handle-select {
  width: 120px;
}

.handle-input {
  width: 300px;
  display: inline-block;
}
.del-dialog-cnt {
  font-size: 16px;
  text-align: center;
}
</style>
